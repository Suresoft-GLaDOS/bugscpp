From 617ea67123f6ecbded4a97c484f8587129e9a728 Mon Sep 17 00:00:00 2001
From: Seyeon <best6653@gmail.com>
Date: Fri, 17 Sep 2021 09:12:55 +0900
Subject: [PATCH] buggy

---
 lib/forwardanalyzer.cpp | 37 +++++++++----------------------------
 1 file changed, 9 insertions(+), 28 deletions(-)

diff --git a/lib/forwardanalyzer.cpp b/lib/forwardanalyzer.cpp
index db1b478c5..a3dd51111 100644
--- a/lib/forwardanalyzer.cpp
+++ b/lib/forwardanalyzer.cpp
@@ -65,19 +65,13 @@ struct ForwardTraversal {
             return Progress::Continue;
         if (recursion > 10000)
             return Progress::Skip;
-        T* firstOp = tok->astOperand1();
-        T* secondOp = tok->astOperand2();
         // Evaluate RHS of assignment before LHS
-        if (tok->isAssignmentOp())
-            std::swap(firstOp, secondOp);
-        if (firstOp && traverseRecursive(firstOp, f, traverseUnknown, recursion+1) == Progress::Break)
+        if (tok->astOperand1() && traverseRecursive(tok->astOperand1(), f, traverseUnknown, recursion+1) == Progress::Break)
             return Progress::Break;
-        Progress p = tok->isAssignmentOp() ? Progress::Continue : traverseTok(tok, f, traverseUnknown);
+        Progress p = traverseTok(tok, f, traverseUnknown);
         if (p == Progress::Break)
             return Progress::Break;
-        if (p == Progress::Continue && secondOp && traverseRecursive(secondOp, f, traverseUnknown, recursion+1) == Progress::Break)
-            return Progress::Break;
-        if (tok->isAssignmentOp() && traverseTok(tok, f, traverseUnknown) == Progress::Break)
+        if (p == Progress::Continue && tok->astOperand2() && traverseRecursive(tok->astOperand2(), f, traverseUnknown, recursion+1) == Progress::Break)
             return Progress::Break;
         return Progress::Continue;
     }
@@ -278,7 +271,11 @@ struct ForwardTraversal {

             // Evaluate RHS of assignment before LHS
             if (Token* assignTok = assignExpr(tok)) {
-                if (updateRecursive(assignTok) == Progress::Break)
+                if (updateRecursive(assignTok->astOperand2()) == Progress::Break)
+                    return Progress::Break;
+                if (updateRecursive(assignTok->astOperand1()) == Progress::Break)
+                    return Progress::Break;
+                if (update(assignTok) == Progress::Break)
                     return Progress::Break;
                 tok = nextAfterAstRightmostLeaf(assignTok);
                 if (!tok)
@@ -302,7 +299,7 @@ struct ForwardTraversal {
                     return Progress::Break;
                 if (Token::Match(tok->link()->previous(), ")|else {")) {
                     const bool inElse = Token::simpleMatch(tok->link()->previous(), "else {");
-                    Token* condTok = getCondTokFromEnd(tok);
+                    const Token* condTok = getCondTokFromEnd(tok);
                     if (!condTok)
                         return Progress::Break;
                     if (!condTok->hasKnownIntValue()) {
@@ -311,16 +308,7 @@ struct ForwardTraversal {
                     } else if (condTok->values().front().intvalue == inElse) {
                         return Progress::Break;
                     }
                     // Handle for loop
-                    Token* stepTok = getStepTokFromEnd(tok);
-                    bool checkThen, checkElse;
-                    std::tie(checkThen, checkElse) = evalCond(condTok);
-                    if (stepTok && !checkElse) {
-                        if (updateRecursive(stepTok) == Progress::Break)
-                            return Progress::Break;
-                        if (updateRecursive(condTok) == Progress::Break)
-                            return Progress::Break;
-                    }
                     analyzer->assume(condTok, !inElse, tok);
                     if (Token::simpleMatch(tok, "} else {"))
                         tok = tok->linkAt(2);
@@ -541,15 +528,7 @@ struct ForwardTraversal {
         return tok->astOperand2()->astOperand2()->astOperand2();
     }

-    static Token* getStepTokFromEnd(Token* tok) {
-        if (!Token::simpleMatch(tok, "}"))
-            return nullptr;
-        Token* end = tok->link()->previous();
-        if (!Token::simpleMatch(end, ")"))
-            return nullptr;
-        return getStepTok(end->link());
-    }

 };

 void valueFlowGenericForward(Token* start, const Token* end, const ValuePtr<ForwardAnalyzer>& fa, const Settings* settings)
--
2.25.1

