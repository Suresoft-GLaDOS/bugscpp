{
  "info": {
    "url": "https://github.com/danmar/cppcheck.git",
    "short-desc": "Cppcheck is a static analysis tool for C/C++ code.",
    "vcs": "git"
  },
  "common": {
    "build": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "cmake @DPP_CMAKE_GEN_COMPILATION_DB@ -Wno-dev -DBUILD_TESTS=ON -S . -B build",
            "cmake --build build --target clean",
            "@DPP_CMAKE_COMPILATION_DB_TOOL@ cmake --build build --target all --parallel @DPP_PARALLEL_BUILD@"
          ]
        }
      ]
    },
    "build-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "cmake @DPP_CMAKE_GEN_COMPILATION_DB@ -Wno-dev -DCMAKE_C_FLAGS=\"--coverage -g -O0\" -DCMAKE_CXX_FLAGS=\"--coverage -g -O0\" -DCMAKE_CXX_OUTPUT_EXTENSION_REPLACE=ON -DCMAKE_C_OUTPUT_EXTENSION_REPLACE=ON -DBUILD_TESTS=ON -S . -B build",
            "cmake --build build --target clean",
            "@DPP_CMAKE_COMPILATION_DB_TOOL@ cmake --build build --target all --parallel @DPP_PARALLEL_BUILD@"
          ]
        }
      ]
    },
    "test-type": "ctest",
    "test": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c \"[ -f CTEST_TEST_CASE.output ] || ctest --show-only --test-dir build | sed -rn 's/[[:blank:]]*Test[[:blank:]]*#[[:digit:]]*:[[:blank:]]*(.*)/\\1/p' > CTEST_TEST_CASE.output\"",
            "bash -c \"index=$(cat DPP_TEST_INDEX); ctest --output-on-failure --tests-regex $(sed -n \\\"${index}p\\\" < CTEST_TEST_CASE.output)$ --test-dir build\""
          ]
        }
      ]
    },
    "test-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c \"[ -f CTEST_TEST_CASE.output ] || ctest --show-only --test-dir build | sed -rn 's/[[:blank:]]*Test[[:blank:]]*#[[:digit:]]*:[[:blank:]]*(.*)/\\1/p' > CTEST_TEST_CASE.output\"",
            "bash -c \"index=$(cat DPP_TEST_INDEX); ctest --output-on-failure --tests-regex $(sed -n \\\"${index}p\\\" < CTEST_TEST_CASE.output)$ --test-dir build\""
          ]
        }
      ]
    },
    "gcov": {
      "exclude": [],
      "commands": [
        {
          "type": "docker",
          "lines": [
            "mkdir gcov",
            "bash -c 'find /home/workspace/build/cli/CMakeFiles/cppcheck.dir -type f -name \"*.o\" -exec gcov @DPP_ADDITIONAL_GCOV_OPTIONS@ --preserve-paths  {} \\;'",
            "bash -c 'find /home/workspace/build/cli/CMakeFiles/cli_objs.dir -type f -name \"*.o\" -exec gcov @DPP_ADDITIONAL_GCOV_OPTIONS@ --preserve-paths  {} \\;'",
            "bash -c 'find /home/workspace/build/lib/CMakeFiles/lib_objs.dir -type f -name \"*.o\" -exec gcov @DPP_ADDITIONAL_GCOV_OPTIONS@ --preserve-paths  {} \\;'",
            "bash -c 'find build -type f -name \"*.gcda\" -delete'",
            "bash -c 'mv *.gcov /home/workspace/gcov'"
          ]
        }
      ]
    }
  },
  "defects": [
    {
      "id": 1,
      "hash": "007b5d3e8d6d83237d425fdddd0c40089dcab59b",
      "num_cases": 75,
      "case": [24],
      "tags": [
        "memory-error",
        "multi-line",
        "modified"
      ],
      "description": "Memory leak false positive when return with cast"
    },
    {
      "id": 2,
      "hash": "00fae7fb428b0b055135d6b972a1b52dd2c08d03",
      "num_cases": 75,
      "case": [30],
      "tags": [
        "logical-error",
        "multi-line",
        "added"
      ],
      "description": "Inconsistent violation report between using global enum and namespaced enum."
    },
    {
      "id": 3,
      "hash": "02287d9d34fac41315124c9e02ba083da13766ef",
      "num_cases": 85,
      "case": [33],
      "tags": [
        "etc",
        "multi-line",
        "modified"
      ],
      "description": "ValueFlowForward : decrement"
    },
    {
      "id": 4,
      "hash": "02682ab17dd5ef57e45a2727f52045c46112b83c",
      "num_cases": 92,
      "case": [21],
      "tags": [
        "invalid-condition",
        "single-line",
        "modified"
      ],
      "description": "Missing return"
    },
    {
      "id": 5,
      "hash": "02ae71917a8b8f7890ef5e950243b987a8a43892",
      "num_cases": 84,
      "case": [5],
      "tags": [
        "omission",
        "multi-line",
        "added"
      ],
      "description": "False positive: Reference to temporary returned when using operator()"
    },
    {
      "id": 6,
      "hash": "02eaf6fa93530af3e2f9dd94a36820a9781767d1",
      "num_cases": 76,
      "case": [52],
      "tags": [
        "omission",
        "multi-line",
        "modified"
      ],
      "description": "False positive: uninitStructMember related to reference to member"
    },
    {
      "id": 7,
      "hash": "033640310b5dc53f290dc4563a9b96b9eb881f6b",
      "num_cases": 74,
      "case": [48],
      "tags": [
        "omission",
        "multi-line",
        "added"
      ],
      "description": "Unknown macro is not reported and then Cppcheck is silent about issues"
    },
    {
      "id": 8,
      "hash": "03b41ac9878cc15f483f6aa3f696bab3875be17b",
      "num_cases": 84,
      "case": [32],
      "tags": [
        "invalid-condition",
        "single-line",
        "modified"
      ],
      "description": "False positive: Parameter can be declared const when written to via stream extraction operator"
    },
    {
      "id": 9,
      "hash": "03cefd5d7035aaaa019aca3b64254b9a1fd4e00c",
      "num_cases": 85,
      "case": [5],
      "tags": [
        "invalid-condition",
        "single-line",
        "modified"
      ],
      "description": "False positive: returnReference when using a pointer to container"
    },
    {
      "id": 10,
      "hash": "045f21ee48c278ffc645c3ed56acbbe2746548b1",
      "num_cases": 92,
      "case": [15],
      "tags": [
        "invalid-condition",
        "single-line",
        "modified"
      ],
      "description": "False positive: uninitMemberVar with std::map"
    },
    {
      "id": 11,
      "hash": "047c3ed6baef4b7cfdc91f9dc1fe245b9d8384c7",
      "num_cases": 85,
      "case": [60],
      "tags": [
        "invalid-condition",
        "single-line",
        "modified"
      ],
      "description": "False positive: knownConditionTrueFalse value flow doesn't account for virtual functions"
    },
    {
      "id": 12,
      "hash": "04c85baf030bdac59d51177faace7f7c71d5d72d",
      "num_cases": 85,
      "case": [44],
      "tags": [
        "etc",
        "multi-line",
        "modified"
      ],
      "description": "false negative: (error) Invalid v.at() argument nr 1"
    },
    {
      "id": 13,
      "hash": "0619b873d0837c639da54ef1057734d08e490980",
      "num_cases": 91,
      "case": [31],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "False positive: nullPointerRedundantCheck with ternary and null condition first"
    },
    {
      "id": 14,
      "hash": "06752d75a5b2de3c9f83b4e50c749fef8edae250",
      "num_cases": 76,
      "case": [30],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "False positive: knownConditionTrueFalse with integer constant"
    },
    {
      "id": 15,
      "hash": "06ea1a2b538e0ad67f711fec1b9493ca673d0cac",
      "num_cases": 75,
      "case": [55],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "False positive: variable is assigned a value that is never used (static)"
    },
    {
      "id": 16,
      "hash": "06ed088bd075271ad9a39889a62b5e89a6b7acc4",
      "num_cases": 84,
      "case": [30],
      "tags": [
        "etc",
        "multi-line",
        "modified"
      ],
      "description": "Wrong lifetime caused by std::function"
    },
    {
      "id": 17,
      "hash": "0832830a959b9463b70834bd52eccd710e787a1b",
      "num_cases": 84,
      "case": [13],
      "tags": [
        "etc",
        "multi-line",
        "modified"
      ],
      "description": "ValueFlow: Comparison is always false, but ValueFlow says it is always true"
    },
    {
      "id": 18,
      "hash": "090eba7e7fff6ef1e01362337a588a0071ea4490",
      "num_cases": 85,
      "case": [31],
      "tags": [
        "etc",
        "multi-line",
        "modified"
      ],
      "description": "ValueFlow: valueFlowForward, loop"
    },
    {
      "id": 19,
      "hash": "0a718694afae837010f68a2bdbb8f158e1ea81aa",
      "num_cases": 85,
      "case": [5],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "False positive: danglingTemporaryLifetime when returning a vector of vectors"
    },
    {
      "id": 20,
      "hash": "0a84ad874c7ba5dbd4acc1c7e84a78807a45a6a9",
      "num_cases": 91,
      "case": [52],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "Fix case ranges with single quotes and escape sequences"
    },
    {
      "id": 21,
      "hash": "0adf09c5077402f3d158fb877a704aa243995641",
      "num_cases": 91,
      "case": [11],
      "tags": [
        "omission",
        "multi-line",
        "added"
      ],
      "description": "ClangImport: fixed output for anonymous enum"
    },
    {
      "id": 22,
      "hash": "0aebc32ae0b1f548b96daa9e5ebb298172a22622",
      "num_cases": 91,
      "case": [55],
      "tags": [
        "omission",
        "multi-line",
        "added"
      ],
      "description": "Uninitialized variables: fixed false positive for 'cin >> x[0]'"
    },
    {
      "id": 23,
      "hash": "0b7649ca9bb51a2f8b587afc2e085bf1d82d1013",
      "num_cases": 83,
      "case": [60],
      "tags": [
        "omission",
        "multi-line",
        "modified"
      ],
      "description": "Tell cppcheck that strcpy returns its first argument"
    },
    {
      "id": 24,
      "hash": "0c659a149953b9a67901a5b30259b7ef534bbaad",
      "num_cases": 84,
      "case": [59],
      "tags": [
        "invalid-condition",
        "single-line",
        "modified"
      ],
      "description": "Fix incorrect logic for condition"
    },
    {
      "id": 25,
      "hash": "0cc1f69862fd4cb0e8e1a6d8ac1d6427b0310af5",
      "num_cases": 85,
      "case": [5],
      "tags": [
        "invalid-condition",
        "single-line",
        "modified"
      ],
      "description": "False position: returnDanglingLifetime for class method taking const char* and returning std::string"
    },
    {
      "id": 26,
      "hash": "0d31486264911f7a7fbd959add91afab95da7333",
      "num_cases": 92,
      "case": [52],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "Wrong AST for destructor call"
    },
    {
      "id": 27,
      "hash": "0df4876059d2c1d39c6cac3574298ad7db95fddb",
      "num_cases": 75,
      "case": [11],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "False positive: knownConditionTrueFalse"
    },
    {
      "id": 28,
      "hash": "0ecac8e23b70f97cbe6308089bc14fff5a1d97c7",
      "num_cases": 91,
      "case": [5],
      "tags": [
        "omission",
        "multi-line",
        "modified"
      ],
      "description": "ValueFlow: Wrong lifetime, pointer member is not allocated on stack"
    },
    {
      "id": 29,
      "hash": "0fed6f00915561fdea445c4de1a02ba380e54f37",
      "num_cases": 76,
      "case": [19],
      "tags": [
        "omission",
        "multi-line",
        "modified"
      ],
      "description": "Clang testsuite crash"
    },
    {
      "id": 30,
      "hash": "120c57225256ea7a62d80c85afed512d28a22609",
      "num_cases": 84,
      "case": [53],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "Chained stream operation gives uninitvar error"
    }
  ]
}
