{
  "info": {
    "url": "https://github.com/jbeder/yaml-cpp.git",
    "short-desc": "A YAML parser and emitter in C++",
    "vcs": "git"
  },
  "common": {
    "build": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'rm -rf build'",
            "bash -c 'cmake -B build . -DCMAKE_CXX_FLAGS=\"-fsanitize-recover=all -g\"'",
            "bash -c 'cd build; make -j @DPP_PARALLEL_BUILD@'"
          ]
        }
      ]
    },
    "build-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'rm -rf build'",
            "bash -c 'cmake -B build . -DCMAKE_CXX_FLAGS=\"--coverage -g -O0 -DDPP_ENABLE_GCOV -fsanitize-recover=all -g\"'",
            "bash -c 'cd build; make -j @DPP_PARALLEL_BUILD@'"
          ]
        }
      ]
    },
    "test-type": "ctest",
    "test": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'index=$(cat DPP_TEST_INDEX); /home/workspace/build/test/yaml-cpp-tests --gtest_filter=\"$(sed -n ${index}p .dpp/test_list)\"'"
          ]
        }
      ]
    },
    "test-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'index=$(cat DPP_TEST_INDEX); /home/workspace/build/test/yaml-cpp-tests --gtest_filter=\"$(sed -n ${index}p .dpp/test_list)\"'"
          ]
        }
      ]
    },
    "gcov": {
      "exclude": [],
      "commands": [
        {
          "type": "docker",
          "lines": [
            "mkdir gcov",
            "bash -c 'gcov @DPP_ADDITIONAL_GCOV_OPTIONS@ --preserve-paths $(find . -name *.gcno -exec dirname {} \\; | uniq | xargs printf -- \"%s/*.o \")'",
            "bash -c 'find . -type f -name \"*.gcov\" -execdir mv {} /home/workspace/gcov \\;'",
            "bash -c 'find . -type f -name \"*.gcda\" -delete'"
          ]
        }
      ]
    }
  },
  "defects": [
    {
      "hash": "4edff1fa5dbfca16fc72d89870841bee89f8ef89",
      "num_cases": 15,
      "case": [15],
      "description": "CVE_2018_20573 Improper Restriction of Operations within the Bounds of a Memory Buffer"
    },
    {
      "hash": "72fe73a1043bef4a4f9e7032132f2aa50865d97e",
      "num_cases": 15,
      "case": [2],
      "description": "Generate right long keys"
    },
    {
      "hash": "5a9ab177bad9665ac5eb8f5b12435052123b5b6f",
      "num_cases": 15,
      "case": [10],
      "description": "Tag_null"
    },
    {
      "hash": "33315286abb27c04a5fc5322b828153f6aaf70eb",
      "num_cases": 15,
      "case": [10],
      "description": "Add the support to parsing a null value as std::string."
    },
    {
      "hash": "51ce663085f8d9d6d2bda0c2f1fad94874df5c3c",
      "num_cases": 15,
      "case": [2],
      "description": "Handle a key with length over 1024 as a long key."
    },
    {
      "hash": "c3df6d87d42ed0f4b047405a558b9850ff7b888e",
      "num_cases": 15,
      "case": [10],
      "description": "Properly allow a trailing tab character on a block scalar"
    },
    {
      "hash": "1c9abc8fa4702c06d53b866dd2e7ca3b9c865f7e",
      "num_cases": 15,
      "case": [2],
      "description": "Handle the empty content of flow sep/map correctly during emitting."
    },
    {
      "hash": "9ee3928754693565fa561e2b6fda4058948d1d56",
      "num_cases": 15,
      "case": [2],
      "description": "Prevent trailing spaces when emitting literal strings."
    }
  ]
}
