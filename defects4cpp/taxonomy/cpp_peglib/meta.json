{
  "info": {
    "url": "https://github.com/yhirose/cpp-peglib.git",
    "short-desc": "A single file C++ header-only PEG (Parsing Expression Grammars) library.",
    "vcs": "git"
  },
  "common": {
    "build": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'rm -rf build'",
            "bash -c 'cmake -B build . -DCMAKE_CXX_FLAGS=\"-fsanitize-recover=all -g\"'",
            "bash -c 'cd build; make -j @DPP_PARALLEL_BUILD@'"
          ]
        }
      ]
    },
    "build-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'rm -rf build'",
            "bash -c 'cmake -B build . -DCMAKE_CXX_FLAGS=\"--coverage -g -O0 -DDPP_ENABLE_GCOV -fsanitize-recover=all -g\"'",
            "bash -c 'cd build; make -j @DPP_PARALLEL_BUILD@'"
          ]
        }
      ]
    },
    "test-type": "ctest",
    "test": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'index=$(cat DPP_TEST_INDEX); $(find . -name *test-main) \"\" \"$(sed -n ${index}p .dpp/test_list)\"'"
          ]
        }
      ]
    },
    "test-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c 'index=$(cat DPP_TEST_INDEX); $(find . -name *test-main) \"\" \"$(sed -n ${index}p .dpp/test_list)\"'"
          ]
        }
      ]
    },
    "gcov": {
      "exclude": [],
      "commands": [
        {
          "type": "docker",
          "lines": [
            "mkdir gcov",
            "bash -c 'gcov @DPP_ADDITIONAL_GCOV_OPTIONS@ --preserve-paths $(find . -name *.gcno -exec dirname {} \\; | uniq | xargs printf -- \"%s/*.o \")'",
            "bash -c 'find . -type f -name \"*.gcov\" -execdir mv {} /home/workspace/gcov \\;'",
            "bash -c 'find . -type f -name \"*.gcda\" -delete'"
          ]
        }
      ]
    }
  },
  "defects": [
    {
      "hash": "0061f393de54cf0326621c079dc2988336d1ebb3",
      "num_cases": 126,
      "case": [4],
      "description": "CVE-2020-23914 NULL Pointer Dereference"
    },
    {
      "hash": "072cdb6d235c09d858e91c976c006cefa9ef10ea",
      "num_cases": 117,
      "case": [93, 94],
      "description": "Macro that passes args to another macro causes crash"
    },
    {
      "hash": "8e890ced7fdf762e7a73380d887daccec1b75ec2",
      "num_cases": 125,
      "case": [22],
      "description": "Fix support to custom AST node types"
    },
    {
      "hash": "be470f93320b6ec98668a65452a5ac4a6b9e8468",
      "num_cases": 94,
      "case": [74],
      "description": "Macro parameters are hidden by rule identifiers"
    },
    {
      "hash": "2d276c8cd9a64800587172b40b8cb74e273a4f88",
      "num_cases": 90,
      "case": [51],
      "description": "Fix left recursion not detected"
    },
    {
      "hash": "5445b5c2bb8310c3a65a9b61a84a0463660047a4",
      "num_cases": 80,
      "case": [35],
      "description": "Packrat parsing problem with macro"
    },
    {
      "hash": "e72b63045585aececc0c3e81885b9b35d1dd99d3",
      "num_cases": 61,
      "case": [42],
      "description": "Added line_info method on SemanticValues"
    },
    {
      "hash": "a3cfd1b8ada850722176f58cb52cb0e23e81568a",
      "num_cases": 52,
      "case": [33],
      "description": "Handled UTF-8 codes from 0x80 as valid identifier codes"
    },
    {
      "hash": "5b9daaf0906f2ac45cb0639f11e71805034dc4fb",
      "num_cases": 53,
      "case": [13],
      "description": "Restored before/after handlers."
    },
    {
      "hash": "b92da07beddd286cc16ef3620793e297a5f17a6c",
      "num_cases": 134,
      "case": [52, 55],
      "description": "Interaction between %whitespace and token boundary operators"
    }
  ]
}
