From 00b919bb41f4000a1d4b5f6e2f0a77286844f7f7 Mon Sep 17 00:00:00 2001
From: haku <gentlebuuny@gmail.com>
Date: Tue, 13 Jul 2021 13:54:43 +0900
Subject: [PATCH] split tests

---
 tests/defects4cpp.h    |  11 +++++
 tests/defects4cpp.lua  |   1 +
 tests/test-alignment.c | 101 +++++++++++++++++++++++++++++++++++++----
 tests/test-api.c       |  28 +++++++++++-
 tests/test-atoms.c     |  30 ++++++++----
 tests/test-bitmask.c   |  10 ++++
 tests/test-dex.c       |  64 ++++++++++++++++++--------
 tests/test-elf.c       |  86 +++++++++++++++++++++++------------
 tests/test-exception.c |  16 +++++--
 tests/test-macho.c     |  96 +++++++++++++++++++++++++++++++--------
 tests/test-math.c      |  11 +++--
 tests/test-pe.c        |  57 +++++++++++++++--------
 tests/test-rules.c     |  68 ++++++++++++++++++++++++---
 13 files changed, 461 insertions(+), 118 deletions(-)
 create mode 100644 tests/defects4cpp.h
 create mode 100644 tests/defects4cpp.lua

diff --git a/tests/defects4cpp.h b/tests/defects4cpp.h
new file mode 100644
index 00000000..39a25b15
--- /dev/null
+++ b/tests/defects4cpp.h
@@ -0,0 +1,11 @@
+#include <lua5.3/lualib.h>
+#include <lua5.3/lauxlib.h>
+
+static int defects4cpp_test_index() {
+  lua_State *L = luaL_newstate();
+  luaL_openlibs(L);
+  luaL_dofile(L, "tests/defects4cpp.lua");
+  int ret = lua_tonumber(L, -1);
+  lua_close(L);
+  return ret;
+}
diff --git a/tests/defects4cpp.lua b/tests/defects4cpp.lua
new file mode 100644
index 00000000..a4325f62
--- /dev/null
+++ b/tests/defects4cpp.lua
@@ -0,0 +1 @@
+return 1
diff --git a/tests/test-alignment.c b/tests/test-alignment.c
index 03a6f5e5..5cd1c6fc 100644
--- a/tests/test-alignment.c
+++ b/tests/test-alignment.c
@@ -31,6 +31,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <stdio.h>
 #undef NDEBUG
 #include <assert.h>
+#include "defects4cpp.h"
 
 int err = 0;
 
@@ -64,61 +65,143 @@ int err = 0;
     }                                                 \
   } while (0)
 
-
 int main (int argc, char **argv)
 {
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 1:
   CHECK_SIZE(YR_NAMESPACE, 4 * YR_MAX_THREADS + 8);
+          break;
+      case 2:
   CHECK_OFFSET(YR_NAMESPACE, 4 * YR_MAX_THREADS, name);
-
+          break;
+      case 3:
   CHECK_SIZE(YR_META, 32);
+          break;
+      case 4:
   CHECK_OFFSET(YR_META, 8,  integer);
+          break;
+      case 5:
   CHECK_OFFSET(YR_META, 16, identifier);
+          break;
+      case 6:
   CHECK_OFFSET(YR_META, 24, string);
-
+          break;
+      case 7:
   CHECK_SIZE(YR_MATCHES, 24);
+          break;
+      case 8:
   CHECK_OFFSET(YR_MATCHES, 8,  head);
+          break;
+      case 9:
   CHECK_OFFSET(YR_MATCHES, 16, tail);
-
+          break;
+      case 10:
   CHECK_SIZE(YR_STRING, 64 + 2 * 24 /* YR_MATCHES */ * YR_MAX_THREADS);
+          break;
+      case 11:
   CHECK_OFFSET(YR_STRING, 4,  length);
+          break;
+      case 12:
   CHECK_OFFSET(YR_STRING, 8,  identifier);
+          break;
+      case 13:
   CHECK_OFFSET(YR_STRING, 16, string);
+          break;
+      case 14:
   CHECK_OFFSET(YR_STRING, 24, chained_to);
+          break;
+      case 15:
   CHECK_OFFSET(YR_STRING, 32, rule);
+          break;
+      case 16:
   CHECK_OFFSET(YR_STRING, 40, chain_gap_min);
+          break;
+      case 17:
   CHECK_OFFSET(YR_STRING, 44, chain_gap_max);
+          break;
+      case 18:
   CHECK_OFFSET(YR_STRING, 48, fixed_offset);
-
+          break;
+      case 19:
   CHECK_SIZE(YR_RULE, 16 + 4 * YR_MAX_THREADS + 40);
+          break;
+      case 20:
   CHECK_OFFSET(YR_RULE, 4,                        t_flags);
+          break;
+      case 21:
   CHECK_OFFSET(YR_RULE, 8 + 4 * YR_MAX_THREADS,      identifier);
+          break;
+      case 22:
   CHECK_OFFSET(YR_RULE, 8 + 4 * YR_MAX_THREADS + 8,  tags);
+          break;
+      case 23:
   CHECK_OFFSET(YR_RULE, 8 + 4 * YR_MAX_THREADS + 16, metas);
+          break;
+      case 24:
   CHECK_OFFSET(YR_RULE, 8 + 4 * YR_MAX_THREADS + 24, strings);
+          break;
+      case 25:
   CHECK_OFFSET(YR_RULE, 8 + 4 * YR_MAX_THREADS + 32, ns);
-
+          break;
+      case 26:
   CHECK_SIZE(YR_EXTERNAL_VARIABLE, 24);
+          break;
+      case 27:
   CHECK_OFFSET(YR_EXTERNAL_VARIABLE, 8,  value.i);
+          break;
+      case 28:
   CHECK_OFFSET(YR_EXTERNAL_VARIABLE, 8,  value.f);
+          break;
+      case 29:
   CHECK_OFFSET(YR_EXTERNAL_VARIABLE, 8,  value.s);
+          break;
+      case 30:
   CHECK_OFFSET(YR_EXTERNAL_VARIABLE, 16, identifier);
-
+          break;
+      case 31:
   CHECK_SIZE(YR_AC_MATCH, 40);
+          break;
+      case 32:
   CHECK_OFFSET(YR_AC_MATCH, 8,  string);
+          break;
+      case 33:
   CHECK_OFFSET(YR_AC_MATCH, 16, forward_code);
+          break;
+      case 34:
   CHECK_OFFSET(YR_AC_MATCH, 24, backward_code);
+          break;
+      case 35:
   CHECK_OFFSET(YR_AC_MATCH, 32, next);
-
+          break;
+      case 36:
   CHECK_SIZE(YARA_RULES_FILE_HEADER, 48);
+          break;
+      case 37:
   CHECK_OFFSET(YARA_RULES_FILE_HEADER, 0, rules_list_head);
+          break;
+      case 38:
   CHECK_OFFSET(YARA_RULES_FILE_HEADER, 8, externals_list_head);
+          break;
+      case 39:
   CHECK_OFFSET(YARA_RULES_FILE_HEADER, 16, code_start);
+          break;
+      case 40:
   CHECK_OFFSET(YARA_RULES_FILE_HEADER, 24, ac_match_table);
+          break;
+      case 41:
   CHECK_OFFSET(YARA_RULES_FILE_HEADER, 32, ac_transition_table);
-
+          break;
+      case 42:
   CHECK_SIZE(SIZED_STRING, 12);
+          break;
+      case 43:
   CHECK_OFFSET(SIZED_STRING, 4, flags);
+          break;
+      case 44:
   CHECK_OFFSET(SIZED_STRING, 8, c_string);
+          break;
+  }
 
   return err;
 }
diff --git a/tests/test-api.c b/tests/test-api.c
index c0877e7c..62e713ee 100644
--- a/tests/test-api.c
+++ b/tests/test-api.c
@@ -9,6 +9,8 @@
 #endif
 #include <fcntl.h>
 
+#include "defects4cpp.h"
+
 void test_disabled_rules()
 {
   YR_RULES* rules;
@@ -732,16 +734,40 @@ void test_issue_920()
 
 int main(int argc, char** argv)
 {
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 45:
   test_disabled_rules();
+          break;
+      case 46:
   test_file_descriptor();
+          break;
+      case 47:
   test_max_string_per_rules();
+          break;
+      case 48:
   test_max_match_data();
+          break;
+      case 49:
   test_include_callback();
+          break;
+      case 50:
   test_save_load_rules();
+          break;
+      case 51:
   test_scanner();
+          break;
+      case 52:
   test_ast_callback();
+          break;
+      case 53:
   test_rules_stats();
-
+          break;
+      case 54:
   test_issue_834();
+          break;
+      case 55:
   test_issue_920();
+          break;
+  }
 }
diff --git a/tests/test-atoms.c b/tests/test-atoms.c
index 66f4b07b..33095846 100644
--- a/tests/test-atoms.c
+++ b/tests/test-atoms.c
@@ -29,6 +29,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <yara.h>
 #include "util.h"
+#include "defects4cpp.h"
 
 
 void test_quality_quality()
@@ -57,32 +58,45 @@ void test_quality_quality()
   c.quality_table = l1;
   c.quality_table_entries = 3;
 
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 56:
   assert_true_expr(
       yr_atoms_table_quality(&c, a0, sizeof(a0)) == 1);
-
+          break;
+      case 57:
   assert_true_expr(
       yr_atoms_table_quality(&c, a1, sizeof(a1)) == 2);
-
+          break;
+      case 58:
   assert_true_expr(
       yr_atoms_table_quality(&c, a2, sizeof(a2)) == 3);
-
+          break;
+      case 59:
   assert_true_expr(
       yr_atoms_table_quality(&c, a3, sizeof(3)) == YR_MAX_ATOM_QUALITY);
-
+          break;
+  }
   c.quality_table = l2;
   c.quality_table_entries = 4;
-
+  switch (index) {
+      case 60:
   assert_true_expr(
       yr_atoms_table_quality(&c, a0, sizeof(a0)) == 1);
-
+          break;
+      case 61:
   assert_true_expr(
       yr_atoms_table_quality(&c, a1, sizeof(a1)) == 2);
-
+          break;
+      case 62:
   assert_true_expr(
       yr_atoms_table_quality(&c, a2, sizeof(a2)) == 3);
-
+          break;
+      case 63:
   assert_true_expr(
       yr_atoms_table_quality(&c, a3, sizeof(a3)) == 4);
+          break;
+  }
 }
 
 
diff --git a/tests/test-bitmask.c b/tests/test-bitmask.c
index b1efb3f7..537ddb71 100644
--- a/tests/test-bitmask.c
+++ b/tests/test-bitmask.c
@@ -31,6 +31,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <yara/bitmask.h>
 #include <yara.h>
 #include "util.h"
+#include "defects4cpp.h"
 
 #define BITMAP_SIZE 512
 
@@ -232,7 +233,16 @@ void test_find_non_colliding_offsets_2()
 
 int main(int argc, char** argv)
 {
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 64:
   test_set_clear();
+          break;
+      case 65:
   test_find_non_colliding_offsets_1();
+          break;
+      case 66:
   test_find_non_colliding_offsets_2();
+          break;
+  }
 }
diff --git a/tests/test-dex.c b/tests/test-dex.c
index 012375a0..c37b3660 100644
--- a/tests/test-dex.c
+++ b/tests/test-dex.c
@@ -1,107 +1,131 @@
 #include <yara.h>
 #include "util.h"
 #include "blob.h"
+#include "defects4cpp.h"
 
 int main(int argc, char** argv)
 {
   yr_initialize();
-
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 67:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.header.magic == \
         dex.DEX_FILE_MAGIC_035 }",
       DEX_FILE);
-
+          break;
+      case 68:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.header.checksum == \
         0x3F9C602F }",
       DEX_FILE);
-
+          break;
+      case 69:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.header.data_size == \
         0x18C }",
       DEX_FILE);
-
+          break;
+      case 70:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.string_ids[0].value ==\
       \"<clinit>\" }",
       DEX_FILE);
-
+          break;
+      case 71:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.string_ids[8].value == \
         \"com.google.helloyara\" }",
       DEX_FILE);
-
+          break;
+      case 72:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.type_ids[0].descriptor_idx == \
         0x2 }",
       DEX_FILE);
-
+          break;
+      case 73:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.proto_ids[0].shorty_idx == \
         0x6 }",
       DEX_FILE);
-
+          break;
+      case 74:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.field_ids[0].class_idx == \
         0x1 }",
       DEX_FILE);
-
+          break;
+      case 75:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.method_ids[0].class_idx == \
         0x1 }",
       DEX_FILE);
-
+          break;
+      case 76:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.class_defs[0].class_idx == \
         0x1 }",
       DEX_FILE);
-
+          break;
+      case 77:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.number_of_fields == 2 }",
       DEX_FILE);
-
+          break;
+      case 78:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.field[0].class_name == \
         \"Lcom/android/tools/ir/server/AppInfo;\" }",
       DEX_FILE);
-
+          break;
+      case 79:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.field[0].name == \
         \"applicationId\" }",
       DEX_FILE);
-
+          break;
+      case 80:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.number_of_methods == 2 }",
       DEX_FILE);
-
+          break;
+      case 81:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.method[0].class_name == \
         \"Lcom/android/tools/ir/server/AppInfo;\" }",
       DEX_FILE);
-
+          break;
+      case 82:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.method[0].proto == \"V\" }",
       DEX_FILE);
-
+          break;
+      case 83:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.method[0].name == \
         \"<clinit>\" }",
       DEX_FILE);
-
+          break;
+      case 84:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.method[1].name == \
         \"<init>\" }",
       DEX_FILE);
-
+          break;
+      case 85:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: dex.map_list.size == 12 }",
       DEX_FILE);
-
+          break;
+      case 86:
   assert_true_rule_blob(
       "import \"dex\" rule test { condition: \
           dex.map_list.map_item[0].type == dex.TYPE_HEADER_ITEM \
         }",
       DEX_FILE);
+          break;
+  }
 
   yr_finalize();
 }
diff --git a/tests/test-elf.c b/tests/test-elf.c
index b8a18aef..8fe5baac 100644
--- a/tests/test-elf.c
+++ b/tests/test-elf.c
@@ -1,27 +1,34 @@
 #include <yara.h>
 #include "util.h"
 #include "blob.h"
+#include "defects4cpp.h"
 
 int main(int argc, char** argv)
 {
   yr_initialize();
-
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 87:
   assert_true_rule_blob(
       "import \"elf\" rule test { condition: elf.type }",
       ELF32_FILE);
-
+          break;
+      case 88:
   assert_true_rule_blob(
       "import \"elf\" rule test { condition: elf.type }",
       ELF64_FILE);
-
+          break;
+      case 89:
   assert_true_rule_blob(
       "import \"elf\" rule test { condition: elf.machine == elf.EM_386 }",
       ELF32_FILE)
-
+          break;
+      case 90:
   assert_true_rule_blob(
       "import \"elf\" rule test { condition: elf.machine == elf.EM_X86_64 }",
       ELF64_FILE)
-
+          break;
+      case 91:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -29,7 +36,8 @@ int main(int argc, char** argv)
         condition: $a at elf.entry_point \
       }",
       ELF32_FILE);
-
+          break;
+      case 92:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -37,29 +45,34 @@ int main(int argc, char** argv)
         condition: $a at elf.entry_point \
       }",
       ELF64_FILE);
-
+          break;
+      case 93:
   assert_true_rule_blob(
       "import \"elf\" rule test { condition: elf.entry_point == 0xa0 }",
       ELF32_NOSECTIONS);
-
+          break;
+      case 94:
   assert_true_rule_blob(
       "import \"elf\" rule test { condition: elf.entry_point == 0x1a0 }",
       ELF32_SHAREDOBJ);
-
+        break;
+      case 95:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
         condition: elf.sections[2].name == \".comment\" \
       }",
       ELF64_FILE);
-
+          break;
+      case 96:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
         condition: elf.machine == elf.EM_MIPS \
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 97:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -67,7 +80,8 @@ int main(int argc, char** argv)
           elf.number_of_sections == 35 and elf.number_of_segments == 10 \
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 98:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -78,7 +92,8 @@ int main(int argc, char** argv)
             elf.sections[i].name == \".text\") \
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 99:
   assert_true_rule_blob(
       "import \"elf\" \
         rule test { \
@@ -89,7 +104,8 @@ int main(int argc, char** argv)
             elf.segments[i].file_size == 0x95c)\
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 100:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -98,7 +114,8 @@ int main(int argc, char** argv)
           elf.symtab_entries == 80 \
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 101:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -109,7 +126,8 @@ int main(int argc, char** argv)
             elf.symtab[i].name == \"_start_c\") \
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 102:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -121,7 +139,8 @@ int main(int argc, char** argv)
           elf.symtab[68].size == 56 \
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 103:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -130,7 +149,8 @@ int main(int argc, char** argv)
           elf.dynamic[4].val == 0x400484\
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 104:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -140,14 +160,16 @@ int main(int argc, char** argv)
             elf.dynamic[i].val == 0x400000)\
       }",
       ELF32_MIPS_FILE);
-
+          break;
+      case 105:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
         condition: elf.machine == elf.EM_X86_64 \
       }",
       ELF_x64_FILE);
-
+          break;
+      case 106:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -156,7 +178,8 @@ int main(int argc, char** argv)
           elf.number_of_segments == 7 \
       }",
       ELF_x64_FILE);
-
+          break;
+      case 107:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -167,7 +190,8 @@ int main(int argc, char** argv)
             elf.sections[i].name == \".got.plt\") \
       }",
       ELF_x64_FILE);
-
+          break;
+      case 108:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -178,7 +202,8 @@ int main(int argc, char** argv)
               elf.segments[i].file_size == 0x1b0) \
       }",
       ELF_x64_FILE);
-
+          break;
+      case 109:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -187,7 +212,8 @@ int main(int argc, char** argv)
             elf.symtab_entries == 48  \
       }",
       ELF_x64_FILE);
-
+          break;
+      case 110:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -198,7 +224,8 @@ int main(int argc, char** argv)
             elf.symtab[i].name == \"main\") \
      }",
      ELF_x64_FILE);
-
+          break;
+      case 111:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -210,7 +237,8 @@ int main(int argc, char** argv)
           elf.symtab[20].size == 0 \
       }",
       ELF_x64_FILE);
-
+          break;
+      case 112:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -219,7 +247,8 @@ int main(int argc, char** argv)
           elf.dynamic[13].val == 0x601000 \
      }",
      ELF_x64_FILE);
-
+          break;
+      case 113:
   assert_true_rule_blob(
       "import \"elf\" \
       rule test { \
@@ -229,6 +258,7 @@ int main(int argc, char** argv)
             elf.dynamic[i].val == 0x4003c0) \
       }",
       ELF_x64_FILE);
-
+          break;
+  }
   yr_finalize();
 }
diff --git a/tests/test-exception.c b/tests/test-exception.c
index be0e40de..0da9ae10 100644
--- a/tests/test-exception.c
+++ b/tests/test-exception.c
@@ -36,6 +36,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <yara.h>
 #include "util.h"
+#include "defects4cpp.h"
 
 #define COUNT 128
 char wbuf[1024];
@@ -230,12 +231,16 @@ int main(int argc, char **argv)
   if (op == NULL)
   {
     int status;
+    int index = defects4cpp_test_index();
+    switch (index) {
+        case 114:
     puts("Test: crash");
     setenv("TEST_OP", "CRASH", 1);
     status = reexec(argv[0]);
     if (status != 0)
       return 1;
-
+            break;
+        case 115:
     puts("Test: crash-no-handle");
     setenv("TEST_OP", "CRASH-NO-HANDLE", 1);
     status = reexec(argv[0]);
@@ -244,13 +249,15 @@ int main(int argc, char **argv)
       fputs("Expected subprocess to be terminated by signal\n", stderr);
       return 1;
     }
-
+            break;
+        case 116:
     puts("Test: blocked-signal");
     setenv("TEST_OP", "BLOCKED-SIGNAL", 1);
     status = reexec(argv[0]);
     if (status != 0)
       return 1;
-
+            break;
+        case 117:
     puts("Test: crash-other-thread");
     setenv("TEST_OP", "CRASH-OTHER-THREAD", 1);
     status = reexec(argv[0]);
@@ -259,7 +266,8 @@ int main(int argc, char **argv)
       fputs("Expected subprocess to be terminated by signal\n", stderr);
       return 1;
     }
-
+            break;
+    }
     puts("Done.");
   }
   else if (!strcmp(op, "CRASH"))
diff --git a/tests/test-macho.c b/tests/test-macho.c
index 796641ba..ad4d1fa0 100644
--- a/tests/test-macho.c
+++ b/tests/test-macho.c
@@ -1,44 +1,60 @@
 #include <yara.h>
 #include "util.h"
 #include "blob.h"
+#include "defects4cpp.h"
 
 int main(int argc, char** argv)
 {
   yr_initialize();
-
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 118:
   //  Tests for executable files
-
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_X86 }", MACHO_X86_FILE);
+          break;
+      case 119:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_EXECUTE }", MACHO_X86_FILE);
+          break;
+      case 120:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.flags & macho.MH_PIE }", MACHO_X86_FILE);
-
+          break;
+      case 121:
   // Segments
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.number_of_segments == 4 }", MACHO_X86_FILE);
+          break;
+      case 122:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[0].segname == \"__PAGEZERO\" and \
     macho.segments[1].segname == \"__TEXT\" and \
     macho.segments[2].segname == \"__DATA\" and \
     macho.segments[3].segname == \"__LINKEDIT\" }", MACHO_X86_FILE);
+          break;
+      case 123:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[0].vmaddr == 0 and \
     macho.segments[0].vmsize == 0x1000 and \
     macho.segments[2].nsects == 2 and \
     macho.segments[3].fsize == 0x118 }", MACHO_X86_FILE);
-
+          break;
+      case 124:
   // Sections
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[1].sections[0].addr == 0x1e90 and \
     macho.segments[1].sections[0].size == 0xa6 and \
     macho.segments[1].sections[0].offset == 0x0e90 }", MACHO_X86_FILE);
+          break;
+      case 125:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[1].sections[0].sectname == \"__text\" and \
     macho.segments[1].sections[0].segname == \"__TEXT\" }", MACHO_X86_FILE);
+          break;
+      case 126:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[1].sections[1].sectname == \"__symbol_stub\" and \
     macho.segments[1].sections[2].sectname == \"__stub_helper\" and \
@@ -47,19 +63,24 @@ int main(int argc, char** argv)
     macho.segments[2].sections[0].sectname == \"__nl_symbol_ptr\" and \
     macho.segments[2].sections[1].sectname == \"__la_symbol_ptr\" }",
     MACHO_X86_FILE);
-
+          break;
+      case 127:
   // Entry point (LC_MAIN)
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.entry_point == 0xe90 }", MACHO_X86_FILE);
-
+          break;
+      case 128:
   // Tests for object files
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_X86 }", MACHO_X86_OBJECT_FILE);
+          break;
+      case 129:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_OBJECT }", MACHO_X86_OBJECT_FILE);
-
+          break;
+      case 130:
   // Segments and sections
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
@@ -67,14 +88,18 @@ int main(int argc, char** argv)
     macho.segments[0].sections[0].sectname == \"__text\" and \
     macho.segments[0].sections[0].segname == \"__TEXT\" }",
     MACHO_X86_OBJECT_FILE);
-
+          break;
+      case 131:
   // Tests for big-endian byte order
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_POWERPC }", MACHO_PPC_FILE);
+          break;
+      case 132:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_EXECUTE }", MACHO_PPC_FILE);
-
+          break;
+      case 133:
   // Segments
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
@@ -86,50 +111,68 @@ int main(int argc, char** argv)
     macho.segments[0].vmsize == 0x1000 and \
     macho.segments[3].fileoff == 65536 and \
     macho.segments[3].fsize == 46032 }", MACHO_PPC_FILE);
-
+          break;
+      case 134:
   // Entry point (LC_UNIXTHREAD)
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.entry_point == 0xeb8 }", MACHO_PPC_FILE);
-
+          break;
+      case 135:
   // Tests for 64-bit and shared library files
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_X86_64 }", MACHO_X86_64_DYLIB_FILE);
+          break;
+      case 136:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_DYLIB }", MACHO_X86_64_DYLIB_FILE);
+          break;
+      case 137:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.flags & macho.MH_DYLDLINK and \
     macho.flags & macho.MH_NOUNDEFS and \
     macho.flags & macho.MH_NO_REEXPORTED_DYLIBS and \
     macho.flags & macho.MH_TWOLEVEL }", MACHO_X86_64_DYLIB_FILE);
-
+          break;
+      case 138:
   // Segments and sections
 
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.number_of_segments == 2 }", MACHO_X86_64_DYLIB_FILE);
+          break;
+      case 139:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[0].segname == \"__TEXT\" and \
     macho.segments[1].segname == \"__LINKEDIT\" }", MACHO_X86_64_DYLIB_FILE);
+          break;
+      case 140:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[1].vmaddr == 0x0000000000001000 and \
     macho.segments[1].vmsize == 0x0000000000001000 and \
     macho.segments[1].nsects == 0 and \
     macho.segments[1].fsize == 128 }", MACHO_X86_64_DYLIB_FILE);
+          break;
+      case 141:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[0].sections[0].sectname == \"__text\" and \
     macho.segments[0].sections[0].segname == \"__TEXT\" }",
     MACHO_X86_64_DYLIB_FILE);
+          break;
+      case 142:
   assert_true_rule_blob("import \"macho\" rule test { condition: \
     macho.segments[0].sections[1].addr == 0x0000000000000f98 and \
     macho.segments[0].sections[1].size == 0x0000000000000048 and \
     macho.segments[0].sections[1].offset == 3992 }", MACHO_X86_64_DYLIB_FILE);
-
+          break;
+      case 143:
   // Mach-O Universal Binaries tests
 
   assert_true_rule_file("import \"macho\" rule test { condition: \
     macho.fat_magic == macho.FAT_MAGIC and macho.nfat_arch == 2 }",
     "tests/data/tiny-universal");
+          break;
+      case 144:
   assert_true_rule_file("import \"macho\" rule test { condition: \
     macho.fat_arch[0].cputype == macho.CPU_TYPE_I386 and \
     macho.fat_arch[0].cpusubtype == macho.CPU_SUBTYPE_I386_ALL and \
@@ -138,42 +181,53 @@ int main(int argc, char** argv)
     macho.fat_arch[1].cpusubtype == macho.CPU_SUBTYPE_X86_64_ALL | \
     macho.CPU_SUBTYPE_LIB64 and macho.fat_arch[1].align == 12 }",
     "tests/data/tiny-universal");
+          break;
+      case 145:
   assert_true_rule_file("import \"macho\" rule test { condition: \
     macho.file[0].cputype == macho.fat_arch[0].cputype and \
     macho.file[1].cputype == macho.fat_arch[1].cputype }",
     "tests/data/tiny-universal");
-
+          break;
+      case 146:
   // Entry points for files (LC_MAIN)
 
   assert_true_rule_file("import \"macho\" rule test { \
     strings: $1 = { 55 89 e5 56 83 ec 34 } \
     condition: $1 at macho.file[0].entry_point + macho.fat_arch[0].offset }",
     "tests/data/tiny-universal");
-
+          break;
+      case 147:
   assert_true_rule_file("import \"macho\" rule test { \
     strings: $1 = { 55 48 89 e5 48 83 ec 20 } \
     condition: $1 at macho.file[1].entry_point + macho.fat_arch[1].offset }",
     "tests/data/tiny-universal");
-
+          break;
+      case 148:
   // Helper functions
 
   assert_true_rule_file("import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_I386)].entry_point == \
     macho.file[0].entry_point }", "tests/data/tiny-universal");
+          break;
+      case 149:
   assert_true_rule_file("import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_X86_64)].entry_point == \
     macho.file[1].entry_point }", "tests/data/tiny-universal");
-
+          break;
+      case 150:
   assert_true_rule_file("import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_I386, \
                macho.CPU_SUBTYPE_I386_ALL)].entry_point == \
     macho.file[0].entry_point }", "tests/data/tiny-universal");
+          break;
+      case 151:
   assert_true_rule_file("import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_X86_64, \
                macho.CPU_SUBTYPE_X86_64_ALL | \
                macho.CPU_SUBTYPE_LIB64)].entry_point == \
     macho.file[1].entry_point }", "tests/data/tiny-universal");
-
+          break;
+      case 152:
   // Entry point for specific architecture
 
   assert_true_rule_file("import \"macho\" rule test { \
@@ -181,11 +235,13 @@ int main(int argc, char** argv)
     condition: $1 at macho.entry_point_for_arch(macho.CPU_TYPE_I386, \
                                        macho.CPU_SUBTYPE_I386_ALL) }",
     "tests/data/tiny-universal");
-
+          break;
+      case 153:
   assert_true_rule_file("import \"macho\" rule test { \
     strings: $1 = { 55 48 89 e5 48 83 ec 20 } \
     condition: $1 at macho.entry_point_for_arch(macho.CPU_TYPE_X86_64) }",
     "tests/data/tiny-universal");
-
+          break;
+  }
   yr_finalize();
 }
diff --git a/tests/test-math.c b/tests/test-math.c
index e2e497b5..529eadeb 100644
--- a/tests/test-math.c
+++ b/tests/test-math.c
@@ -1,11 +1,14 @@
 #include <yara.h>
 #include <stdio.h>
 #include "util.h"
+#include "defects4cpp.h"
 
 int main(int argc, char** argv)
 {
   yr_initialize();
-
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 154:
   assert_true_rule_blob(
       "import \"math\" \
       rule test { \
@@ -13,7 +16,8 @@ int main(int argc, char** argv)
           math.min(0, 1) == 0 \
       }",
       "A");
-
+          break;
+      case 155:
   assert_true_rule_blob(
       "import \"math\" \
       rule test { \
@@ -21,7 +25,8 @@ int main(int argc, char** argv)
           math.max(0, 1) == 1 \
       }",
       "A");
-
+          break;
+  }
   yr_finalize();
   return 0;
 }
diff --git a/tests/test-pe.c b/tests/test-pe.c
index 29596d95..19a5a57d 100644
--- a/tests/test-pe.c
+++ b/tests/test-pe.c
@@ -1,11 +1,14 @@
 #include <yara.h>
 #include <stdio.h>
 #include "util.h"
+#include "defects4cpp.h"
 
 int main(int argc, char** argv)
 {
   yr_initialize();
-
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 156:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -13,7 +16,8 @@ int main(int argc, char** argv)
           pe.imports(\"KERNEL32.dll\", \"DeleteCriticalSection\") \
       }",
       "tests/data/tiny");
-
+          break;
+      case 157:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -21,7 +25,8 @@ int main(int argc, char** argv)
           pe.imports(\"KERNEL32.dll\", \"DeleteCriticalSection\") \
       }",
       "tests/data/tiny-idata-51ff");
-
+          break;
+      case 158:
   assert_false_rule_file(
       "import \"pe\" \
       rule test { \
@@ -29,7 +34,8 @@ int main(int argc, char** argv)
           pe.imports(\"KERNEL32.dll\", \"DeleteCriticalSection\") \
       }",
       "tests/data/tiny-idata-5200");
-
+          break;
+      case 159:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -37,7 +43,8 @@ int main(int argc, char** argv)
           pe.number_of_imports == 2 \
       }",
       "tests/data/tiny");
-
+          break;
+      case 160:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -45,7 +52,8 @@ int main(int argc, char** argv)
           pe.number_of_sections == 7 \
       }",
       "tests/data/tiny");
-
+          break;
+      case 161:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -53,7 +61,8 @@ int main(int argc, char** argv)
           pe.entry_point == 0x14E0 \
       }",
       "tests/data/tiny");
-
+          break;
+      case 162:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -62,7 +71,8 @@ int main(int argc, char** argv)
           pe.linker_version.minor == 26 \
       }",
       "tests/data/tiny");
-
+          break;
+      case 163:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -76,7 +86,8 @@ int main(int argc, char** argv)
           pe.sections[6].name == \".tls\" \
       }",
       "tests/data/tiny");
-
+          break;
+      case 164:
   #if defined(HAVE_LIBCRYPTO) || \
       defined(HAVE_WINCRYPT_H) || \
       defined(HAVE_COMMONCRYPTO_COMMONCRYPTO_H)
@@ -88,9 +99,9 @@ int main(int argc, char** argv)
           pe.imphash() == \"1720bf764274b7a4052bbef0a71adc0d\" \
       }",
       "tests/data/tiny");
-
   #endif
-
+          break;
+      case 165:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -98,7 +109,8 @@ int main(int argc, char** argv)
           pe.section_index(\".text\") == 0 \
       }",
       "tests/data/tiny");
-
+          break;
+      case 166:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -106,7 +118,8 @@ int main(int argc, char** argv)
           pe.section_index(pe.entry_point) == 0 \
       }",
       "tests/data/tiny");
-
+          break;
+      case 167:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -114,7 +127,8 @@ int main(int argc, char** argv)
           pe.is_32bit() and not pe.is_64bit() \
       }",
       "tests/data/tiny");
-
+          break;
+      case 168:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -122,7 +136,8 @@ int main(int argc, char** argv)
           pe.checksum == 0xA8DC \
       }",
       "tests/data/tiny");
-
+          break;
+      case 169:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -130,7 +145,8 @@ int main(int argc, char** argv)
           pe.checksum == pe.calculate_checksum() \
       }",
       "tests/data/tiny");
-
+          break;
+      case 170:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -138,7 +154,8 @@ int main(int argc, char** argv)
           pe.overlay.offset == 0x8000 and pe.overlay.size == 7 \
       }",
       "tests/data/tiny-overlay");
-
+          break;
+      case 171:
   assert_true_rule_file(
       "import \"pe\" \
       rule test { \
@@ -146,7 +163,8 @@ int main(int argc, char** argv)
          pe.overlay.size == 0 \
       }",
       "tests/data/tiny");
-
+          break;
+      case 172:
   assert_false_rule_file(
       "import \"pe\" \
       rule test { \
@@ -154,7 +172,8 @@ int main(int argc, char** argv)
           pe.checksum == pe.calculate_checksum() \
       }",
       "tests/data/tiny-idata-51ff");
-
+          break;
+  }
   yr_finalize();
   return 0;
 }
diff --git a/tests/test-rules.c b/tests/test-rules.c
index af190a34..f4be2afa 100644
--- a/tests/test-rules.c
+++ b/tests/test-rules.c
@@ -35,6 +35,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <yara.h>
 #include "blob.h"
 #include "util.h"
+#include "defects4cpp.h"
 
 
 static void test_boolean_operators()
@@ -1942,27 +1943,69 @@ void test_performance_warnings()
 int main(int argc, char** argv)
 {
   yr_initialize();
-
+  int index = defects4cpp_test_index();
+  switch (index) {
+      case 173:
   test_boolean_operators();
+          break;
+      case 174:
   test_comparison_operators();
+          break;
+      case 175:
   test_arithmetic_operators();
+          break;
+      case 176:
   test_bitwise_operators();
+          break;
+      case 177:
   test_matches_operator();
+          break;
+      case 178:
   test_syntax();
+          break;
+      case 179:
   test_anonymous_strings();
+          break;
+      case 180:
   test_strings();
+          break;
+      case 181:
   test_wildcard_strings();
+          break;
+      case 182:
   test_hex_strings();
+          break;
+      case 183:
   test_count();
+          break;
+      case 184:
   test_at();
+          break;
+      case 185:
   test_in();
+          break;
+      case 186:
   test_offset();
+          break;
+      case 187:
   test_length();
+          break;
+      case 188:
   test_of();
+          break;
+      case 189:
   test_for();
+          break;
+      case 190:
   test_re();
+          break;
+      case 191:
   test_filesize();
+          break;
+      case 192:
   test_include_files();
+          break;
+      case 193:
   // test_compile_file();
   // test_compile_files();
 
@@ -1970,24 +2013,37 @@ int main(int argc, char** argv)
   // test_callback();
   // test_compare();
   test_comments();
+          break;
+      case 194:
   test_modules();
+          break;
+      case 195:
   test_integer_functions();
+          break;
+      case 196:
   // test_string_io();
   test_entrypoint();
+          break;
+      case 197:
   test_global_rules();
-
+          break;
+      case 198:
   #if !defined(USE_WINDOWS_PROC) && !defined(USE_NO_PROC)
   test_process_scan();
   #endif
-
+          break;
+      case 199:
   #if defined(HASH_MODULE)
   test_hash_module();
   #endif
-
+          break;
+      case 200:
   test_time_module();
+          break;
+      case 201:
   test_performance_warnings();
-
+          break;
+  }
   yr_finalize();
-
   return 0;
 }
-- 
2.25.1

