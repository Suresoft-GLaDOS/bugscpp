{
  "info": {
    "url": "https://gitlab.com/gnuwget/wget2.git",
    "short-desc": "GNU Wget2 is the successor of GNU Wget, a file and recursive website downloader.",
    "vcs": "git"
  },
  "common": {
    "build": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "./bootstrap --skip-po",
            "./configure --enable-assert --cache-file cache/config.cache",
            "make clean",
            "@DPP_COMPILATION_DB_TOOL@ make -j@DPP_PARALLEL_BUILD@"
          ]
        }
      ]
    },
    "build-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "./bootstrap --skip-po",
            "./configure CFLAGS=\"--coverage -g -O0\" LDFLAGS=\"-lgcov\" --enable-assert --cache-file cache/config.cache",
            "make clean",
            "@DPP_COMPILATION_DB_TOOL@ make -j@DPP_PARALLEL_BUILD@"
          ]
        }
      ]
    },
    "test-type": "automake",
    "test": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c \"[ -f AUTOMAKE_TEST_CASE.output ] || { make --directory tests print-TESTS | sed '1d;$d' | tr -s ' ' '\\n' | xargs -n 1 -I {} echo tests,{} > AUTOMAKE_TEST_CASE.output && make --directory unit-tests print-TESTS | sed '1d;$d' | tr -s ' ' '\\n' | xargs -n 1 -I {} echo unit-tests,{} >> AUTOMAKE_TEST_CASE.output; }\"",
            "bash -c \"index=$(cat DPP_TEST_INDEX);line=$(sed -n \\\"${index}p\\\" < AUTOMAKE_TEST_CASE.output);line=(${line//,/ });make --directory ${line[0]} check TESTS=\"${line[1]}\"\""
          ]
        }
      ]
    },
    "test-coverage": {
      "commands": [
        {
          "type": "docker",
          "lines": [
            "bash -c \"[ -f AUTOMAKE_TEST_CASE.output ] || { make --directory tests print-TESTS | sed '1d;$d' | tr -s ' ' '\\n' | xargs -n 1 -I {} echo tests,{} > AUTOMAKE_TEST_CASE.output && make --directory unit-tests print-TESTS | sed '1d;$d' | tr -s ' ' '\\n' | xargs -n 1 -I {} echo unit-tests,{} >> AUTOMAKE_TEST_CASE.output; }\"",
            "bash -c \"index=$(cat DPP_TEST_INDEX);line=$(sed -n \\\"${index}p\\\" < AUTOMAKE_TEST_CASE.output);line=(${line//,/ });make --directory ${line[0]} check TESTS=\"${line[1]}\"\""
          ]
        }
      ]
    },
    "gcov": {
      "exclude": [],
      "commands": [
        {
          "type": "docker",
          "lines": [
            "mkdir gcov",
            "bash -c 'cd src; find /home/workspace/src -type f \\( -name \"*.c\" -or -name \"*.h\" \\) -exec gcov @DPP_ADDITIONAL_GCOV_OPTIONS@ --preserve-paths {} \\;'",
            "bash -c 'find /home/workspace/src -type f -name \"*.gcda\" -delete'",
            "bash -c 'cd libwget; find /home/workspace/libwget/.libs -type f -name \"*.o\" -exec gcov @DPP_ADDITIONAL_GCOV_OPTIONS@ --preserve-paths {} \\;'",
            "bash -c 'find /home/workspace/libwget/.libs -type f -name \"*.gcda\" -delete'",
            "bash -c 'find src -type f -name \"*.gcov\" -exec mv {} /home/workspace/gcov \\;'",
            "bash -c 'find libwget -type f -name \"*.gcov\" -exec mv {} /home/workspace/gcov \\;'"
          ]
        }
      ]
    }
  },
  "defects": [
    {
      "id": 1,
      "hash": "9a9bb472501202d1d34523e4a60b4468c78fbe9a",
      "num_cases": 70,
      "case": [1],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "Remove n_recurse_iris."
    },
    {
      "id": 2,
      "hash": "ea2a463451b72b65fa1743d21bd2cac858edbc73",
      "num_cases": 66,
      "case": [23],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "Tune clash checks"
    },
    {
      "id": 3,
      "hash": "5645e709a27f98aef4527480e713d991bac95cc0",
      "num_cases": 66,
      "case": [65],
      "tags": [
        "invalid-condition",
        "multi-line",
        "modified"
      ],
      "description": "New file added"
    }
  ]
}
