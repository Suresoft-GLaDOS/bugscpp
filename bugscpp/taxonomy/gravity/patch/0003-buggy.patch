From 632ec81aae87dc6af03e0dfe182fdfecd7495704 Mon Sep 17 00:00:00 2001
From: Hansol Choe <hschoe@suresofttech.com>
Date: Wed, 20 Dec 2023 04:09:36 +0000
Subject: [PATCH] buggy

---
 src/compiler/gravity_codegen.c | 15 +++------------
 src/compiler/gravity_ircode.c  | 12 +-----------
 src/compiler/gravity_ircode.h  |  1 -
 src/shared/gravity_value.h     |  4 ++--
 4 files changed, 6 insertions(+), 26 deletions(-)

diff --git a/src/compiler/gravity_codegen.c b/src/compiler/gravity_codegen.c
index 8f4fa46..f1fc6b2 100644
--- a/src/compiler/gravity_codegen.c
+++ b/src/compiler/gravity_codegen.c
@@ -1223,7 +1223,7 @@ static void visit_unary_expr (gvisitor_t *self, gnode_unary_expr_t *node) {
 }
 
 static void visit_postfix_expr (gvisitor_t *self, gnode_postfix_expr_t *node) {
-	DEBUG_CODEGEN("visit_postfix_expr");
+	DEBUG_CODEGEN("visit_call_expr");
 
 	// node->list usually cannot be NULL, it is NULL only as a result of a static enum transformation (see semacheck2.c)
 	if (node->list == NULL) {
@@ -1462,16 +1462,7 @@ static void visit_postfix_expr (gvisitor_t *self, gnode_postfix_expr_t *node) {
 	marray_destroy(self_list);
 	ircode_pop_context(code);
 
-    // temp fix for not optimal register allocation algorithm generated code
-    uint32_t temp_register = ircode_register_first_temp_available(code);
-    if (temp_register < dest_register) {
-        // free dest register
-        ircode_register_pop(code);
-        // allocate a new register (that I am now sure does not have holes)
-        temp_register = ircode_register_push_temp(code);
-        ircode_add(code, MOVE, temp_register, dest_register, 0);
-        ircode_register_clear(code, dest_register);
-    }
+    
     
 	CODEGEN_COUNT_REGISTERS(n2);
 	CODEGEN_ASSERT_REGISTERS(n1, n2, (is_assignment) ? -1 : 1);
diff --git a/src/compiler/gravity_ircode.c b/src/compiler/gravity_ircode.c
index baa7ca6..7987371 100644
--- a/src/compiler/gravity_ircode.c
+++ b/src/compiler/gravity_ircode.c
@@ -95,7 +95,7 @@ static inst_t *inst_new (opcode_t op, uint32_t p1, uint32_t p2, uint32_t p3, opt
 	#if GRAVITY_OPCODE_DEBUG
 	if (tag == LABEL_TAG) {
 		DEBUG_OPCODE("LABEL %d", p1);
-	} else if (tag != PRAGMA_MOVE_OPTIMIZATION){
+	} else {
 		const char *op_name = opcode_name(op);
 
 		if (op == LOADI) {
@@ -475,16 +475,6 @@ uint32_t ircode_register_push (ircode_t *code, uint32_t nreg) {
 	return nreg;
 }
 
-uint32_t ircode_register_first_temp_available (ircode_t *code) {
-    for (uint32_t i=0; i<MAX_REGISTERS; ++i) {
-        if (code->state[i] == false) {
-            return i;
-        }
-    }
-    // 0 means no registers available
-    code->error = true;
-    return 0;
-}
 
 uint32_t ircode_register_push_temp (ircode_t *code) {
 	uint32_t value = ircode_register_new(code);
diff --git a/src/compiler/gravity_ircode.h b/src/compiler/gravity_ircode.h
index cd56ecb..13ab752 100644
--- a/src/compiler/gravity_ircode.h
+++ b/src/compiler/gravity_ircode.h
@@ -103,7 +103,6 @@ bool		ircode_register_istemp (ircode_t *code, uint32_t n);
 uint32_t	ircode_register_push_temp (ircode_t *code);
 uint32_t	ircode_register_push (ircode_t *code, uint32_t nreg);
 uint32_t	ircode_register_pop (ircode_t *code);
-uint32_t    ircode_register_first_temp_available (ircode_t *code);
 uint32_t	ircode_register_pop_context_protect (ircode_t *code, bool protect);
 bool		ircode_register_protect_outside_context (ircode_t *code, uint32_t nreg);
 void		ircode_register_protect_in_context (ircode_t *code, uint32_t nreg);
diff --git a/src/shared/gravity_value.h b/src/shared/gravity_value.h
index 4bda567..091fcc7 100644
--- a/src/shared/gravity_value.h
+++ b/src/shared/gravity_value.h
@@ -66,8 +66,8 @@
 extern "C" {
 #endif
 
-#define GRAVITY_VERSION						"0.3.6"     // git tag 0.3.6
-#define GRAVITY_VERSION_NUMBER				0x000306    // git push --tags
+#define GRAVITY_VERSION						"0.3.5"     // git tag 0.3.5
+#define GRAVITY_VERSION_NUMBER				0x000305    // git push --tags
 #define GRAVITY_BUILD_DATE					__DATE__
 
 #ifndef GRAVITY_ENABLE_DOUBLE
-- 
2.25.1

