From 5f98597fa82f2c403055c3be212ad2b66d836c6a Mon Sep 17 00:00:00 2001
From: Hansol Choe <hschoe@suresofttech.com>
Date: Wed, 20 Dec 2023 04:19:16 +0000
Subject: [PATCH] buggy

---
 src/runtime/gravity_core.c | 35 ++++++++++-------------------------
 src/shared/gravity_value.h |  5 ++---
 2 files changed, 12 insertions(+), 28 deletions(-)

diff --git a/src/runtime/gravity_core.c b/src/runtime/gravity_core.c
index ffeee2e..6f569d3 100644
--- a/src/runtime/gravity_core.c
+++ b/src/runtime/gravity_core.c
@@ -932,12 +932,10 @@ static bool list_join (gravity_vm *vm, gravity_value_t *args, uint16_t nargs, ui
 	
 	// create a new empty buffer
 	uint32_t alloc = (uint32_t) (marray_size(list->array) * 64);
-    if (alloc > MAX_MEMORY_BLOCK) RETURN_ERROR("Maximum memory block size reached (max %d, requested %d).", MAX_MEMORY_BLOCK, alloc);
-    
 	uint32_t len = 0;
 	uint32_t seplen = (sep) ? VALUE_AS_STRING(GET_VALUE(1))->len : 0;
-	char *_buffer = mem_alloc(alloc);
-	if (!_buffer) RETURN_ERROR("Not enought memory to allocate a buffer for the join operation.");
+	char *buffer = mem_alloc(alloc);
+	assert(buffer);
 	
 	register gravity_int_t n = marray_size(list->array);
 	register gravity_int_t i = 0;
@@ -946,47 +944,34 @@ static bool list_join (gravity_vm *vm, gravity_value_t *args, uint16_t nargs, ui
 	while (i < n) {
 		gravity_value_t value = convert_value2string(vm, marray_get(list->array, i));
         if (VALUE_ISA_ERROR(value)) {
-            mem_free(_buffer);
+            mem_free(buffer);
             RETURN_VALUE(value, rindex);
         }
 		
-        // compute string to appen
 		const char *s2 = VALUE_AS_STRING(value)->s;
 		uint32_t req = VALUE_AS_STRING(value)->len;
-		uint32_t free_mem = alloc - len;
+		uint32_t free = alloc - len;
 		
 		// check if buffer needs to be reallocated
-		if (free_mem < req + seplen) {
-            uint64_t to_alloc = alloc + (req + seplen) * 2 + 4096;
-            
-            // sanity check
-            if (to_alloc > MAX_MEMORY_BLOCK) {
-                mem_free(_buffer);
-                RETURN_ERROR("Maximum memory block size reached (max %d, requested %lld).", MAX_MEMORY_BLOCK, to_alloc);
-            }
-            
-			_buffer = mem_realloc(_buffer, (uint32_t)to_alloc);
-            if (!_buffer) {
-                mem_free(_buffer);
-                RETURN_ERROR("Not enought memory to re-allocate a buffer for the join operation.");
-            }
-			alloc = (uint32_t)to_alloc;
+		if (free < req + seplen) {
+			buffer = mem_realloc(buffer, (alloc * 2) + req + seplen);
+			alloc += alloc + req + seplen;
 		}
 		
 		// copy s2 to into buffer
-		memcpy(_buffer+len, s2, req);
+		memcpy(buffer+len, s2, req);
 		len += req;
 		
 		// check for separator string
 		if (i+1 < n && seplen) {
-			memcpy(_buffer+len, sep, seplen);
+			memcpy(buffer+len, sep, seplen);
 			len += seplen;
 		}
 		
 		++i;
 	}
 	
-	gravity_string_t *result = gravity_string_new(vm, _buffer, len, alloc);
+	gravity_string_t *result = gravity_string_new(vm, buffer, len, alloc);
 	RETURN_VALUE(VALUE_FROM_OBJECT(result), rindex);
 }
 
diff --git a/src/shared/gravity_value.h b/src/shared/gravity_value.h
index 57f97c0..26e6167 100644
--- a/src/shared/gravity_value.h
+++ b/src/shared/gravity_value.h
@@ -66,8 +66,8 @@
 extern "C" {
 #endif
 
-#define GRAVITY_VERSION						"0.2.8"     // git tag 0.2.8
-#define GRAVITY_VERSION_NUMBER				0x000208    // git push --tags
+#define GRAVITY_VERSION						"0.2.8"
+#define GRAVITY_VERSION_NUMBER				0x000208
 #define GRAVITY_BUILD_DATE					__DATE__
 
 #define GRAVITY_ENABLE_DOUBLE				1			// if 1 enable gravity_float_t to be a double (instead of a float)
@@ -113,7 +113,6 @@ extern "C" {
 #define MAX_IVARS							768			// 2^10 - 2^8
 #define MAX_ALLOCATION                      4194304     // 1024 * 1024 * 4 (about 4 millions entry)
 #define MAX_CCALLS                          100         // default maximum number of nested C calls
-#define MAX_MEMORY_BLOCK                    157286400   // 150MB
 
 #define DEFAULT_CONTEXT_SIZE				256			// default VM context entries (can grow)
 #define DEFAULT_MINSTRING_SIZE				32			// minimum string allocation size
-- 
2.25.1

