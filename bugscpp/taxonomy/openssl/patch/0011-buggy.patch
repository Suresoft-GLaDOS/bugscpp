From 9bba3139ad906c0dc2712f65b654126d82e21aa5 Mon Sep 17 00:00:00 2001
From: yckim <yckim@suresofttech.com>
Date: Wed, 15 Sep 2021 09:37:32 +0900
Subject: [PATCH] buggy

---
 crypto/x509/x509_cmp.c |  2 --
 crypto/x509/x509_vfy.c | 27 ++++++++++++++-------------
 2 files changed, 14 insertions(+), 15 deletions(-)

diff --git a/crypto/x509/x509_cmp.c b/crypto/x509/x509_cmp.c
index 9c968b49b0..da451eccce 100644
--- a/crypto/x509/x509_cmp.c
+++ b/crypto/x509/x509_cmp.c
@@ -142,8 +142,6 @@ int X509_cmp(const X509 *a, const X509 *b)
 {
     int rv;

-    if (a == b) /* for efficiency */
-        return 0;
     /* ensure hash is valid */
     if (X509_check_purpose((X509 *)a, -1, 0) != 1)
         return -2;
diff --git a/crypto/x509/x509_vfy.c b/crypto/x509/x509_vfy.c
index fc470d950e..50aa522a4c 100644
--- a/crypto/x509/x509_vfy.c
+++ b/crypto/x509/x509_vfy.c
@@ -303,16 +303,8 @@ int X509_verify_cert(X509_STORE_CTX *ctx)
     return ret;
 }

-static int sk_X509_contains(STACK_OF(X509) *sk, X509 *cert)
-{
-    int i, n = sk_X509_num(sk);

-    for (i = 0; i < n; i++)
-        if (X509_cmp(sk_X509_value(sk, i), cert) == 0)
-            return 1;
-    return 0;
-}

 /*
  * Find in given STACK_OF(X509) sk a non-expired issuer cert (if any) of given cert x.
  * The issuer must not be the same as x and must not yet be in ctx->chain, where the
@@ -329,9 +319,7 @@ static X509 *find_issuer(X509_STORE_CTX *ctx, STACK_OF(X509) *sk, X509 *x)
          * Below check 'issuer != x' is an optimization and safety precaution:
          * Candidate issuer cert cannot be the same as the subject cert 'x'.
          */
-        if (issuer != x && ctx->check_issued(ctx, x, issuer)
-            && (((x->ex_flags & EXFLAG_SI) != 0 && sk_X509_num(ctx->chain) == 1)
-                || !sk_X509_contains(ctx->chain, issuer))) {
+        if (issuer != x && ctx->check_issued(ctx, x, issuer)) {
             rv = issuer;
             if (x509_check_cert_time(ctx, rv, -1))
                 break;
@@ -341,9 +329,20 @@ static X509 *find_issuer(X509_STORE_CTX *ctx, STACK_OF(X509) *sk, X509 *x)
 }

 /* Check that the given certificate 'x' is issued by the certificate 'issuer' */
-static int check_issued(ossl_unused X509_STORE_CTX *ctx, X509 *x, X509 *issuer)
+static int check_issued(X509_STORE_CTX *ctx, X509 *x, X509 *issuer)
 {
-    return x509_likely_issued(issuer, x) == X509_V_OK;
+    if (x509_likely_issued(issuer, x) != X509_V_OK)
+        return 0;
+    if ((x->ex_flags & EXFLAG_SI) == 0 || sk_X509_num(ctx->chain) != 1) {
+        int i;
+        X509 *ch;
+        for (i = 0; i < sk_X509_num(ctx->chain); i++) {
+            ch = sk_X509_value(ctx->chain, i);
+            if (ch == issuer || X509_cmp(ch, issuer) == 0)
+                return 0;
+        }
+    }
+    return 1;
 }

 /* Alternative lookup method: look from a STACK stored in other_ctx */
--
2.23.0.windows.1

