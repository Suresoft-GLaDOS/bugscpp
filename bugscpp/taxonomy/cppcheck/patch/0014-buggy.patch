From 934c41f5e80297e7a7a3319079d84dfcde493671 Mon Sep 17 00:00:00 2001
From: Seyeon <best6653@gmail.com>
Date: Fri, 17 Sep 2021 08:55:50 +0900
Subject: [PATCH] buggy

---
 lib/checkother.cpp | 38 ++++----------------------------------
 1 file changed, 4 insertions(+), 34 deletions(-)

diff --git a/lib/checkother.cpp b/lib/checkother.cpp
index d5372f7f8..1aa4436a7 100644
--- a/lib/checkother.cpp
+++ b/lib/checkother.cpp
@@ -1987,15 +1987,7 @@ void CheckOther::checkDuplicateExpression()
             if (tok->isOp() && tok->astOperand1() && !Token::Match(tok, "+|*|<<|>>|+=|*=|<<=|>>=")) {
                 if (Token::Match(tok, "==|!=|-") && astIsFloat(tok->astOperand1(), true))
                     continue;
-                const bool followVar = !isConstVarExpression(tok) || Token::Match(tok, "%comp%|%oror%|&&");
-                if (isSameExpression(mTokenizer->isCPP(),
-                                     true,
-                                     tok->astOperand1(),
-                                     tok->astOperand2(),
-                                     mSettings->library,
-                                     true,
-                                     followVar,
-                                     &errorPath)) {
+                if (isSameExpression(mTokenizer->isCPP(), true, tok->astOperand1(), tok->astOperand2(), mSettings->library, true, true, &errorPath)) {
                     if (isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand1())) {
                         const bool assignment = tok->str() == "=";
                         if (assignment && warningEnabled)
@@ -2013,39 +2005,17 @@ void CheckOther::checkDuplicateExpression()
                             duplicateExpressionError(tok->astOperand1(), tok->astOperand2(), tok, errorPath);
                         }
                     }
-                } else if (tok->str() == "=" && Token::simpleMatch(tok->astOperand2(), "=") &&
-                           isSameExpression(mTokenizer->isCPP(),
-                                            false,
-                                            tok->astOperand1(),
-                                            tok->astOperand2()->astOperand1(),
-                                            mSettings->library,
-                                            true,
-                                            false)) {
+                } else if (tok->str() == "=" && Token::simpleMatch(tok->astOperand2(), "=") && isSameExpression(mTokenizer->isCPP(), false, tok->astOperand1(), tok->astOperand2()->astOperand1(), mSettings->library, true, false)) {
                     if (warningEnabled && isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand1())) {
                         selfAssignmentError(tok, tok->astOperand1()->expressionString());
                     }
                 } else if (styleEnabled &&
-                           isOppositeExpression(mTokenizer->isCPP(),
-                                                tok->astOperand1(),
-                                                tok->astOperand2(),
-                                                mSettings->library,
-                                                false,
-                                                true,
-                                                &errorPath) &&
+                           isOppositeExpression(mTokenizer->isCPP(), tok->astOperand1(), tok->astOperand2(), mSettings->library, false, true, &errorPath) &&
                            !Token::Match(tok, "=|-|-=|/|/=") &&
                            isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand1())) {
                     oppositeExpressionError(tok, errorPath);
                 } else if (!Token::Match(tok, "[-/%]")) { // These operators are not associative
-                    if (styleEnabled && tok->astOperand2() && tok->str() == tok->astOperand1()->str() &&
-                        isSameExpression(mTokenizer->isCPP(),
-                                         true,
-                                         tok->astOperand2(),
-                                         tok->astOperand1()->astOperand2(),
-                                         mSettings->library,
-                                         true,
-                                         followVar,
-                                         &errorPath) &&
-                        isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand2()))
+                    if (styleEnabled && tok->astOperand2() && tok->str() == tok->astOperand1()->str() && isSameExpression(mTokenizer->isCPP(), true, tok->astOperand2(), tok->astOperand1()->astOperand2(), mSettings->library, true, true, &errorPath) && isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand2()))
                         duplicateExpressionError(tok->astOperand2(), tok->astOperand1()->astOperand2(), tok, errorPath);
                     else if (tok->astOperand2() && isConstExpression(tok->astOperand1(), mSettings->library, true, mTokenizer->isCPP())) {
                         const Token *ast1 = tok->astOperand1();
-- 
2.25.1

