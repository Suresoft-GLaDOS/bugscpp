From 7ef7f5d2d2c2fa82f547ba63a1a39b3a4ff1cd25 Mon Sep 17 00:00:00 2001
From: Seyeon <best6653@gmail.com>
Date: Fri, 24 Sep 2021 09:22:52 +0900
Subject: [PATCH] buggy

---
 lib/checkleakautovar.cpp | 29 +++--------------------------
 1 file changed, 3 insertions(+), 26 deletions(-)

diff --git a/lib/checkleakautovar.cpp b/lib/checkleakautovar.cpp
index 0bb1037b9..1f9b2909f 100644
--- a/lib/checkleakautovar.cpp
+++ b/lib/checkleakautovar.cpp
@@ -743,31 +743,8 @@ const Token * CheckLeakAutoVar::checkTokenInsideExpression(const Token * const t
                 deallocUseError(tok, tok->str());
             } else if (Token::simpleMatch(tok->tokAt(-2), "= &")) {
                 varInfo->erase(tok->varId());
-            } else {
-                // check if tok is assigned into another variable
-                const Token *rhs = tok;
-                while (rhs->astParent()) {
-                    if (rhs->astParent()->str() == "=")
-                        break;
-                    rhs = rhs->astParent();
-                }
-                if (rhs->varId() == tok->varId()) {
-                    // simple assignment
-                    varInfo->erase(tok->varId());
-                } else if (rhs->str() == "(" && mSettings->library.returnValue(rhs->astOperand1()) != emptyString) {
-                    // #9298, assignment through return value of a function
-                    const std::string &returnValue = mSettings->library.returnValue(rhs->astOperand1());
-                    if (returnValue.compare(0, 3, "arg") == 0) {
-                        int argn;
-                        const Token *func = getTokenArgumentFunction(tok, argn);
-                        if (func) {
-                            const std::string arg = "arg" + std::to_string(argn + 1);
-                            if (returnValue == arg) {
-                                varInfo->erase(tok->varId());
-                            }
-                        }
-                    }
-                }
+            } else if (Token::Match(tok->previous(), "= %var% [;,)]")) {
+                varInfo->erase(tok->varId());
             }
         } else if (Token::Match(tok->previous(), "& %name% = %var% ;")) {
             varInfo->referenced.insert(tok->tokAt(2)->varId());
@@ -782,7 +759,7 @@ const Token * CheckLeakAutoVar::checkTokenInsideExpression(const Token * const t
         if (alloc.type == 0)
             alloc.status = VarInfo::NOALLOC;
         functionCall(tok, openingPar, varInfo, alloc, nullptr);
-        return openingPar;
+        return openingPar->link();
     }
 
     return nullptr;
-- 
2.25.1

